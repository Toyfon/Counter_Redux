{"version":3,"sources":["components/Button/Button.tsx","Redux/actions.ts","Redux/counter-reducer.ts","Redux/redux-store.ts","components/Counter/Counter.tsx","components/Input/Input.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Settings/settings.module.css","components/Counter/counter.module.css"],"names":["Button","name","props","CHANGE_COUNT","RESET_COUNT","CHANGE_MAX_VALUE","CHANGE_START_VALUE","SET_VALUE","SET_ERROR","setErrorAC","error","type","initialState","value","startValue","maxValue","isDisabled","disableBtn","appState","combineReducers","counter","state","action","store","createStore","useTypedSelector","useSelector","Counter","dispatch","useDispatch","useEffect","console","log","className","s","container","redNumber","style","color","fontSize","buttons","btn","disabled","onClick","isNaN","changeCountAC","Input","callBack","finalInputClass","inputError","onChange","e","currentTarget","valueAsNumber","Settings","maxInput","changeMaxValueAC","minInput","changeStartValueAC","setValueAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"8NAUaA,EAAS,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAASC,EAAmD,wBAMjF,OAAO,kDAAYA,GAAZ,aAAoBD,M,+BChBlBE,EAAe,eACfC,EAAc,cACdC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAY,YACZC,EAAY,YA8BZC,EAAa,SAACC,GAAD,MAAqB,CAACC,KAAMH,EAAWE,UCfpDE,EAAiC,CAC1CC,MAAO,EACPC,WAAY,EACZC,SAAU,EACVC,YAAY,EACZC,YAAY,EACZP,OAAO,GCnBPQ,EAAWC,YAAgB,CAC3BC,QDsB0B,WAAkE,IAAjEC,EAAgE,uDAAxDT,EAAcU,EAA0C,uCAC3F,OAAQA,EAAOX,MACX,KAAKR,EACD,OAAO,2BAAIkB,GAAX,IAAkBR,MAAOS,EAAOT,MAAOH,MAAOY,EAAOZ,QACzD,KAAKN,EACD,OAAO,2BAAIiB,GAAX,IAAkBR,MAAOQ,EAAMP,WAAYJ,MAAOW,EAAMX,QAC5D,KAAKL,EACD,OAAO,2BAAIgB,GAAX,IAAkBN,SAAUO,EAAOT,MAAOG,WAAYM,EAAON,WAAYC,WAAYK,EAAOL,aAChG,KAAKX,EACD,OAAO,2BAAIe,GAAX,IAAkBP,WAAYQ,EAAOT,MAAOG,WAAYM,EAAON,WAAYC,WAAYK,EAAOL,aAClG,KAAKV,EACD,OAAO,2BACAc,GADP,IAEIR,MAAOQ,EAAMP,WAAYE,WAAYM,EAAON,WAC5CC,WAAYK,EAAOL,WAAYP,MAAOY,EAAOZ,QAErD,KAAKF,EACD,OAAO,2BACAa,GADP,IACcX,MAAOY,EAAOZ,QAEhC,QACI,OAAOW,MCxCfE,EAAkCC,YAAYN,GAErCO,EAAuDC,IAErDH,ICPFI,EAAU,WAEnB,IAAMd,EAAQY,GAAyB,SAAAJ,GAAK,OAAIA,EAAMD,QAAQP,SACxDC,EAAaW,GAAyB,SAAAJ,GAAK,OAAIA,EAAMD,QAAQN,cAC7DC,EAAWU,GAAyB,SAAAJ,GAAK,OAAIA,EAAMD,QAAQL,YAC3DL,EAAQe,GAA0B,SAAAJ,GAAK,OAAIA,EAAMD,QAAQV,SACzDM,EAAaS,GAA0B,SAAAJ,GAAK,OAAIA,EAAMD,QAAQJ,cAE9DY,EAAWC,cAuBjB,OAVAC,qBAAU,WACNC,QAAQC,IAAItB,GAERkB,EAASnB,EADTI,IAAUE,MAKf,CAACF,IAIA,sBAAKoB,UAAWC,IAAEC,UAAlB,UACI,qBAAKF,UAAWC,IAAErB,MAAlB,SACI,oBAAIoB,UAAWvB,EAAQwB,IAAEE,UAAY,GAArC,SAEQrB,IAAaD,GAAcA,EAAa,GAAKA,EAAaC,EACpD,sBAAMsB,MAAO,CAACC,MAAO,MAAOC,SAAU,QAAtC,+BACA1B,MAIlB,sBAAKoB,UAAWC,IAAEM,QAAlB,UACI,cAAC,EAAD,CAAQP,UAAWC,IAAEO,IAAKC,SAAU1B,GAA0BH,GAASE,EAC/D4B,QAjCG,YACdC,OAAO/B,IAAUA,EAAQE,GAC1Ba,EHLiB,SAACf,EAAeH,GAAhB,MAAoC,CAACC,KAAMR,EAAcU,QAAOH,SGKvEmC,EAAehC,EAAQ,GAAG,KAgCxBZ,KAAM,QACd,cAAC,EAAD,CAAQgC,UAAWC,IAAEO,IAAKC,SAAU1B,GAA0BH,IAAUC,EAAY6B,QA7B7E,WACff,EHR2B,CAACjB,KAAMP,KGqClBH,KAAM,iB,gBCzCjB6C,EAAkC,SAAC,GAGuB,IAFnBjC,EAEkB,EAFlBA,MAAOkC,EAEW,EAFXA,SACAhC,GACW,EADlBL,MACkB,EADXK,UAAUD,EACC,EADDA,WAS3DkC,GAR4D,oEAQ1CjC,IAAaD,GAAcA,EAAc,GAAKA,EAAcC,EAAYmB,IAAEe,WAAa,IAC/G,OACI,uBAAOhB,UAAWe,EACXrC,KAAK,SACLE,MAAOA,EACPqC,SAVa,SAACC,GACrB,IAAItC,EAAQsC,EAAEC,cAAcC,cAC5BN,EAASlC,OCXJyC,EAAW,WAGpB,IAAMrC,EAAaQ,GAA0B,SAAAJ,GAAK,OAAIA,EAAMD,QAAQH,cAC9DF,EAAWU,GAAyB,SAAAJ,GAAK,OAAIA,EAAMD,QAAQL,YAC3DD,EAAaW,GAAyB,SAAAJ,GAAK,OAAIA,EAAMD,QAAQN,cAC7DJ,EAAQe,GAA0B,SAAAJ,GAAK,OAAIA,EAAMD,QAAQV,SAEzDkB,EAAWC,cAkBjB,OACI,sBAAKI,UAAWC,IAAEC,UAAlB,UACI,sBAAKF,UAAWC,IAAErB,MAAlB,UACI,qBAAKoB,UAAWC,IAAEqB,SAAlB,SACA,8CACI,cAAC,EAAD,CAAO1C,MAAOE,EACPgC,SAjBU,SAAClC,GAC9Be,ELPwB,SAACf,EAAeG,EAAqBC,GAArC,MAA8D,CAC1FN,KAAMN,EACNQ,QAAOG,aAAYC,cKKNuC,CAAiB3C,GAAO,GAAM,IACvCe,EAASnB,GAAW,KAgBDC,MAAOA,EACPK,SAAUA,EACVD,WAAYA,SAIvB,qBAAKmB,UAAWC,IAAEuB,SAAlB,SACI,gDACG,cAAC,EAAD,CAAO5C,MAAOC,EACPiC,SAtBS,SAAClC,GAChCe,ELP0B,SAACf,EAAeG,EAAqBC,GAArC,MAA8D,CAC5FN,KAAML,EACNO,QAAOG,aAAYC,cKKNyC,CAAmB7C,GAAO,GAAM,IACzCe,EAASnB,GAAW,KAqBEC,MAAOA,EACPK,SAAUA,EACVD,WAAYA,YAK9B,qBAAKmB,UAAWC,IAAEM,QAAlB,SACI,cAAC,EAAD,CAAQP,UAAWC,IAAEO,IAAKE,QAxCd,WACpBf,ELOkB,SAACZ,EAAqBC,EAAqBP,GAA3C,MAA+D,CACrFC,KAAMJ,EACNS,aAAYC,aAAYP,SKTXiD,EAAW,GAAO,GAAM,KAuC2B1D,KAAM,MAAOyC,SAAUzB,UCzC5E2C,EAfH,WAER,OACI,sBAAK3B,UAAU,UAAf,UAEI,qBAAKA,UAAU,QAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,UCDD4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,CAAUhD,MAAOA,EAAjB,SACE,cAAC,EAAD,MAGFiD,SAASC,eAAe,SAM1BZ,K,kBCnBAa,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,SAAW,2BAA2B,SAAW,2BAA2B,QAAU,0BAA0B,IAAM,sBAAsB,MAAQ,wBAAwB,WAAa,+B,kBCAnRD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,QAAU,yBAAyB,UAAY,2BAA2B,QAAU,yBAAyB,IAAM,wB","file":"static/js/main.7d88824e.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes} from \"react\";\r\n\r\ntype ButtonType = {\r\n    // callBack: () => void,\r\n    name: string\r\n    // disabled?: boolean\r\n    // classes?: string\r\n}\r\n\r\n// export const Button = ({callBack, name, disabled, classes, ...props}: ButtonType & ButtonHTMLAttributes<any>) => {\r\nexport const Button = ({ name, ...props}: ButtonType & ButtonHTMLAttributes<any>) => {\r\n\r\n    //\r\n    // const onClickHandler = () => {\r\n    //     callBack()\r\n    // }\r\n    return <button {...props}>{name}</button>\r\n}","export const CHANGE_COUNT = 'CHANGE_COUNT'\r\nexport const RESET_COUNT = 'RESET_COUNT'\r\nexport const CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE'\r\nexport const CHANGE_START_VALUE = 'CHANGE_START_VALUE'\r\nexport const SET_VALUE = 'SET_VALUE'\r\nexport const SET_ERROR = 'SET_ERROR'\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof changeCountAC> |\r\n    ReturnType<typeof resetCountAC> |\r\n    ReturnType<typeof changeMaxValueAC> |\r\n    ReturnType<typeof changeStartValueAC> |\r\n    ReturnType<typeof setValueAC> |\r\n    ReturnType<typeof setErrorAC>\r\n\r\n\r\nexport const changeCountAC = (value: number, error: boolean) => ({type: CHANGE_COUNT, value, error} as const)\r\n\r\nexport const resetCountAC = () => ({type: RESET_COUNT} as const)\r\n\r\nexport const changeMaxValueAC = (value: number, isDisabled: boolean, disableBtn: boolean) => ({\r\n    type: CHANGE_MAX_VALUE,\r\n    value, isDisabled, disableBtn\r\n} as const)\r\n\r\nexport const changeStartValueAC = (value: number, isDisabled: boolean, disableBtn: boolean) => ({\r\n    type: CHANGE_START_VALUE,\r\n    value, isDisabled, disableBtn\r\n} as const)\r\n\r\nexport const setValueAC = (isDisabled: boolean, disableBtn: boolean, error: boolean) => ({\r\n    type: SET_VALUE,\r\n    isDisabled, disableBtn, error\r\n} as const)\r\n\r\nexport const setErrorAC = (error: boolean) => ({type: SET_ERROR, error} as const)\r\n\r\n","import {\r\n    ActionsType,\r\n    CHANGE_COUNT,\r\n    CHANGE_MAX_VALUE,\r\n    CHANGE_START_VALUE,\r\n    RESET_COUNT,\r\n    SET_ERROR,\r\n    SET_VALUE\r\n} from \"./actions\";\r\n\r\n\r\nexport type initialStateType = {\r\n    value: number\r\n    startValue: number\r\n    maxValue: number\r\n    isDisabled: boolean\r\n    error: boolean\r\n    disableBtn: boolean\r\n}\r\n\r\nexport const initialState: initialStateType = {\r\n    value: 0,\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    isDisabled: false,\r\n    disableBtn: true,\r\n    error: false\r\n}\r\n\r\n\r\nexport const counterReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE_COUNT:\r\n            return {...state, value: action.value, error: action.error}\r\n        case RESET_COUNT:\r\n            return {...state, value: state.startValue, error: state.error}\r\n        case CHANGE_MAX_VALUE:\r\n            return {...state, maxValue: action.value, isDisabled: action.isDisabled, disableBtn: action.disableBtn}\r\n        case CHANGE_START_VALUE:\r\n            return {...state, startValue: action.value, isDisabled: action.isDisabled, disableBtn: action.disableBtn}\r\n        case SET_VALUE:\r\n            return {\r\n                ...state,\r\n                value: state.startValue, isDisabled: action.isDisabled,\r\n                disableBtn: action.disableBtn, error: action.error\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof appState>\r\n\r\nlet appState = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nlet store: Store<AppStateType, any> = createStore(appState)\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector;\r\n\r\nexport default store","import React, {useEffect} from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\nimport s from \"./counter.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\nimport {changeCountAC, resetCountAC, setErrorAC} from \"../../Redux/actions\";\r\n\r\n\r\nexport const Counter = () => {\r\n\r\n    const value = useTypedSelector<number>(state => state.counter.value)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const error = useTypedSelector<boolean>(state => state.counter.error)\r\n    const isDisabled = useTypedSelector<boolean>(state => state.counter.isDisabled)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const incrementValue = () => {\r\n        if (!isNaN(+value) && value < maxValue) {\r\n            dispatch((changeCountAC(+value + 1, false)))\r\n        }\r\n    }\r\n\r\n    const resetValue = () => {\r\n        dispatch((resetCountAC()))\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(error)\r\n        if (value === maxValue) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.value}>\r\n                <h1 className={error ? s.redNumber : \"\"}>\r\n                    {\r\n                        maxValue === startValue || startValue < 0 || startValue > maxValue\r\n                            ? <span style={{color: \"red\", fontSize: \"30px\"}}>\"Incorrect value\"</span>\r\n                            : value\r\n                    }\r\n                </h1>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button className={s.btn} disabled={isDisabled ? isDisabled : value >= maxValue}\r\n                        onClick={incrementValue}\r\n                        name={\"Inc\"}/>\r\n                <Button className={s.btn} disabled={isDisabled ? isDisabled : value === startValue} onClick={resetValue}\r\n                        name={\"Reset\"}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"../Settings/settings.module.css\"\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    value: number\r\n    callBack: (value: number) => void\r\n    error?: boolean\r\n    maxValue?: number\r\n    startValue?: number\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({\r\n                                                    value, callBack,\r\n                                                    error, maxValue, startValue, ...props\r\n                                                }: InputPropsType) => {\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.valueAsNumber\r\n        callBack(value)\r\n    }\r\n\r\n    const finalInputClass = maxValue === startValue || startValue! < 0 || startValue! > maxValue! ? s.inputError : ''\r\n    return (\r\n        <input className={finalInputClass}\r\n               type=\"number\"\r\n               value={value}\r\n               onChange={onChangeHandler}\r\n        />\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './settings.module.css'\r\nimport {Button} from \"../Button/Button\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeMaxValueAC, changeStartValueAC, setErrorAC, setValueAC} from \"../../Redux/actions\";\r\n\r\n\r\n\r\n\r\nexport const Settings = () => {\r\n\r\n\r\n    const disableBtn = useTypedSelector<boolean>(state => state.counter.disableBtn)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n    const error = useTypedSelector<boolean>(state => state.counter.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const callBackHandler = () => {\r\n        dispatch(setValueAC(false, true, false))\r\n    }\r\n\r\n    const onChangeMaxNumberHandler = (value: number) => {\r\n        dispatch(changeMaxValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n\r\n    }\r\n    const onChangeStartNumberHandler = (value: number) => {\r\n        dispatch(changeStartValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.value}>\r\n                <div className={s.maxInput}>\r\n                <span>max value:\r\n                    <Input value={maxValue}\r\n                           callBack={onChangeMaxNumberHandler}\r\n                           error={error}\r\n                           maxValue={maxValue}\r\n                           startValue={startValue}/>\r\n                </span>\r\n\r\n                </div>\r\n                <div className={s.minInput}>\r\n                    <span>start value:\r\n                       <Input value={startValue}\r\n                              callBack={onChangeStartNumberHandler}\r\n                              error={error}\r\n                              maxValue={maxValue}\r\n                              startValue={startValue}\r\n                       />\r\n                </span>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button className={s.btn} onClick={callBackHandler} name={'Set'} disabled={disableBtn}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\n\nconst App = () => {\n\n    return (\n        <div className=\"Wrapper\">\n\n            <div className=\"table\">\n                <Counter/>\n            </div>\n            <div className=\"settings\">\n                <Settings/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from '../src/Redux/redux-store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__cCrPE\",\"value\":\"settings_value__2alja\",\"maxInput\":\"settings_maxInput__ZV-dP\",\"minInput\":\"settings_minInput__2XAkr\",\"buttons\":\"settings_buttons__2Db0X\",\"btn\":\"settings_btn__lh9TF\",\"error\":\"settings_error__1VcTW\",\"inputError\":\"settings_inputError__1EKwG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"counter_container__YFK4P\",\"value\":\"counter_value__1mFaD\",\"warning\":\"counter_warning__1_RI9\",\"redNumber\":\"counter_redNumber__13lef\",\"buttons\":\"counter_buttons__1oyHJ\",\"btn\":\"counter_btn__2yg86\"};"],"sourceRoot":""}
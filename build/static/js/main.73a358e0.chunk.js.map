{"version":3,"sources":["components/Settings/settings.module.css","components/Counter/counter.module.css","Redux/counter-reducer.ts","Redux/redux-store.ts","Redux/actions.ts","components/Counter/Counter.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","initialState","value","startValue","maxValue","isDisabled","disableBtn","error","rootReducer","combineReducers","counter","state","action","type","store","createStore","useTypedSelector","useSelector","setErrorAC","Counter","dispatch","useDispatch","buttonStyle","backgroundColor","color","borderRadius","boxShadow","useEffect","className","s","container","redNumber","style","fontSize","buttons","Button","sx","variant","size","disabled","onClick","isNaN","changeCountAC","localStorage","setItem","JSON","stringify","Settings","maxInput","TextField","onChange","e","changeMaxValueAC","onChangeMaxNumberHandler","currentTarget","valueAsNumber","input","width","height","minInput","changeStartValueAC","onChangeStartNumberHandler","btn","setValueAC","App","initialValueAsString","getItem","settingsAsString","initialValue","parse","settings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","primary","main","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.73a358e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__cCrPE\",\"value\":\"settings_value__2alja\",\"maxInput\":\"settings_maxInput__ZV-dP\",\"minInput\":\"settings_minInput__2XAkr\",\"buttons\":\"settings_buttons__2Db0X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"counter_container__YFK4P\",\"value\":\"counter_value__1mFaD\",\"warning\":\"counter_warning__1_RI9\",\"redNumber\":\"counter_redNumber__13lef\",\"buttons\":\"counter_buttons__1oyHJ\",\"btn\":\"counter_btn__2yg86\"};","import {ActionsType} from \"./actions\";\r\n\r\n\r\nexport const initialState = {\r\n    value: 0,\r\n    startValue: 0,\r\n    maxValue: 3,\r\n    isDisabled: false,\r\n    disableBtn: true,\r\n    error: false\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nexport const counterReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_INITIAL_VALUES\":\r\n            return {\r\n                ...state,\r\n                value: action.value,\r\n                startValue: action.startValue,\r\n                maxValue: action.maxValue\r\n            }\r\n\r\n        case 'CHANGE_COUNT':\r\n            return {...state, value: action.value, error: action.error}\r\n        case 'RESET_COUNT':\r\n            return {...state, value: state.startValue}\r\n        case 'CHANGE_MAX_VALUE':\r\n            return {...state, maxValue: action.value, isDisabled: action.isDisabled, disableBtn: action.disableBtn}\r\n        case 'CHANGE_START_VALUE':\r\n            return {...state, startValue: action.value, isDisabled: action.isDisabled, disableBtn: action.disableBtn}\r\n        case 'SET_VALUE':\r\n            return {\r\n                ...state,\r\n                value: state.startValue, isDisabled: action.isDisabled,\r\n                disableBtn: action.disableBtn, error: action.error\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\n// let store: Store<AppStateType, any> = createStore(rootReducer)\r\nlet store = createStore(rootReducer)\r\nexport type AppStoreType= typeof store\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector;\r\n\r\nexport default store","export const CHANGE_COUNT = 'CHANGE_COUNT'\r\nexport const RESET_COUNT = 'RESET_COUNT'\r\nexport const CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE'\r\nexport const CHANGE_START_VALUE = 'CHANGE_START_VALUE'\r\nexport const SET_VALUE = 'SET_VALUE'\r\nexport const SET_ERROR = 'SET_ERROR'\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof changeCountAC> |\r\n    ReturnType<typeof resetCountAC> |\r\n    ReturnType<typeof changeMaxValueAC> |\r\n    ReturnType<typeof changeStartValueAC> |\r\n    ReturnType<typeof setValueAC> |\r\n    ReturnType<typeof setErrorAC> |\r\n    ReturnType<typeof setInitialValuesAC>\r\n\r\n\r\n\r\nexport const changeCountAC = (value: number, error: boolean) => ({type: 'CHANGE_COUNT', value, error} as const)\r\nexport const resetCountAC = () => ({type: 'RESET_COUNT'} as const)\r\nexport const changeMaxValueAC = (value: number, isDisabled: boolean, disableBtn: boolean) => (\r\n    {\r\n        type: 'CHANGE_MAX_VALUE',\r\n        value, isDisabled, disableBtn\r\n    } as const)\r\nexport const changeStartValueAC = (value: number, isDisabled: boolean, disableBtn: boolean) => (\r\n    {\r\n        type: 'CHANGE_START_VALUE',\r\n        value, isDisabled, disableBtn\r\n    } as const)\r\nexport const setValueAC = (isDisabled: boolean, disableBtn: boolean, error: boolean) => ({\r\n    type: 'SET_VALUE',\r\n    isDisabled, disableBtn, error,\r\n} as const)\r\nexport const setErrorAC = (error: boolean) => ({type: 'SET_ERROR', error} as const)\r\nexport const setInitialValuesAC = (startValue: number, maxValue: number, value: number) => ({\r\n    type: 'SET_INITIAL_VALUES',\r\n    startValue,\r\n    maxValue,\r\n    value\r\n} as const)\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport s from \"./counter.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\nimport {changeCountAC, resetCountAC, setErrorAC} from \"../../Redux/actions\";\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\nexport const Counter = () => {\r\n\r\n    const value = useTypedSelector<number>(state => state.counter.value)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const error = useTypedSelector<boolean>(state => state.counter.error)\r\n    const isDisabled = useTypedSelector<boolean>(state => state.counter.isDisabled)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const incrementValue = () => {\r\n        if (!isNaN(+value) && value < maxValue) {\r\n            dispatch((changeCountAC(+value + 1, false)))\r\n            localStorage.setItem('counterValue', JSON.stringify(value + 1))\r\n        }\r\n    }\r\n    const resetValue = () => {\r\n        dispatch((resetCountAC()))\r\n    }\r\n\r\n\r\n    const buttonStyle = {\r\n        backgroundColor: \"#07575B\", color: \"#66A5AD\", borderRadius: \"20px\",\r\n        boxShadow: \"0px 1px 5px 2px #07575B\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (value === maxValue) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n    }, [value])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('counterValue', JSON.stringify(value))\r\n    // }, [value])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.value}>\r\n                <h1 className={error ? s.redNumber : \"\"}>\r\n                    {\r\n                        maxValue === startValue || startValue < 0 || startValue > maxValue\r\n                            ? <span style={{color: \"red\", fontSize: \"30px\"}}>\"Incorrect value\"</span>\r\n                            :  value\r\n// <span style={{color: \"white\", fontSize: \"30px\"}}>\"set value\"</span>\r\n                    }\r\n                </h1>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    sx={buttonStyle}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    disabled={isDisabled ? isDisabled : value >= maxValue}\r\n                    onClick={incrementValue}>Inc</Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    sx={buttonStyle}\r\n                    disabled={isDisabled ? isDisabled : value === startValue}\r\n                    onClick={resetValue}>Reset</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './settings.module.css'\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeMaxValueAC, changeStartValueAC, setErrorAC, setValueAC} from \"../../Redux/actions\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\nexport const Settings = () => {\r\n\r\n\r\n    const disableBtn = useTypedSelector<boolean>(state => state.counter.disableBtn)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const setSettingsHandler = () => {\r\n        dispatch(setValueAC(false, true, false))\r\n        localStorage.setItem('Settings', JSON.stringify({'startValue': startValue, 'maxValue': maxValue}))\r\n    }\r\n\r\n    const onChangeMaxNumberHandler = (value: number) => {\r\n        dispatch(changeMaxValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n    const onChangeStartNumberHandler = (value: number) => {\r\n        dispatch(changeStartValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n    const buttonStyle = {\r\n        backgroundColor: \"#07575B\", color: \"#66A5AD\", borderRadius: \"20px\",\r\n        boxShadow: \"0px 1px 5px 2px #07575B\"\r\n    }\r\n    const onChangeHandlerMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.valueAsNumber\r\n        onChangeMaxNumberHandler(value)\r\n    }\r\n    const onChangeHandlerStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.valueAsNumber\r\n        onChangeStartNumberHandler(value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.value}>\r\n                <div className={s.maxInput}>\r\n                <span>max value:\r\n                    <TextField variant={\"standard\"}\r\n                               color={maxValue === startValue || startValue! > maxValue! ? \"error\" : \"primary\"}\r\n                               value={maxValue}\r\n                               onChange={onChangeHandlerMax}\r\n                               type={\"number\"}\r\n                               sx={{\r\n                                   input: {\r\n                                       width: \"100px\",\r\n                                       height: \"15px\"\r\n                                   }\r\n                               }}\r\n                    />\r\n                    {/*   <Input value={maxValue}\r\n                           callBack={onChangeMaxNumberHandler}\r\n                           error={error}\r\n                           maxValue={maxValue}\r\n                           startValue={startValue}/>*/}\r\n                </span>\r\n\r\n                </div>\r\n                <div className={s.minInput}>\r\n                    <span>start value:\r\n                         <TextField variant={\"standard\"}\r\n                                    color={maxValue === startValue || startValue! < 0 || startValue! > maxValue! ? \"error\" : \"primary\"}\r\n                                    value={startValue}\r\n                                    onChange={onChangeHandlerStart}\r\n                                    type={\"number\"}\r\n                                    sx={{\r\n                                        input: {\r\n                                            width: \"100px\",\r\n                                            height: \"15px\"\r\n                                        }\r\n                                    }}\r\n                         />\r\n\r\n                        {/*   <Input value={startValue}\r\n                              callBack={onChangeStartNumberHandler}\r\n                              error={error}\r\n                              maxValue={maxValue}\r\n                              startValue={startValue}\r\n                       />*/}\r\n                </span>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        className={s.btn} disabled={disableBtn}\r\n                        sx={buttonStyle}\r\n                        onClick={setSettingsHandler}>Set</Button>\r\n                {/*    <ButtonName className={s.btn} onClick={callBackHandler} name={'Set'} disabled={disableBtn}/>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {useDispatch} from \"react-redux\";\nimport {setInitialValuesAC} from \"./Redux/actions\";\nimport {Container} from \"@mui/material\";\n\n\nconst App = () => {\n\n\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        let initialValueAsString = localStorage.getItem('counterValue')\n        let settingsAsString = localStorage.getItem('Settings')\n        if (settingsAsString !== null && initialValueAsString !== null) {\n            const initialValue = JSON.parse(initialValueAsString)\n            const settings = JSON.parse(settingsAsString)\n            dispatch(setInitialValuesAC(settings.startValue, settings.maxValue, initialValue))\n        }\n\n    }, [])\n\n    return (\n        <div className=\"Wrapper\" >\n            <div className=\"table\">\n                <Counter/>\n            </div>\n            <div>\n                <Settings/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from '../src/Redux/redux-store'\nimport {ThemeProvider, createTheme} from '@mui/material'\n\n\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#07575B',\n        }\n    },\n   /* shadows: [\"none\"]*/\n})\n\n\nReactDOM.render(\n  <Provider store={store}>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
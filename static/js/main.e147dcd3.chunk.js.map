{"version":3,"sources":["components/Settings/settings.module.css","components/Counter/counter.module.css","Redux/counter-reducer.ts","Redux/redux-store.ts","components/Counter/Counter.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","initialState","value","startValue","maxValue","isDisabled","disableBtn","error","setErrorAC","type","payload","rootReducer","combineReducers","counter","state","action","store","createStore","useTypedSelector","useSelector","Counter","dispatch","useDispatch","buttonStyle","backgroundColor","color","borderRadius","boxShadow","useEffect","errorValues","className","s","container","errValue","style","fontSize","fontWeight","buttons","Button","sx","variant","size","disabled","onClick","changeCountAC","localStorage","setItem","JSON","stringify","Settings","maxInput","TextField","onChange","e","currentTarget","valueAsNumber","changeMaxValueAC","input","width","height","minInput","changeStartValueAC","btn","setValueAC","App","initialValueAsString","getItem","settingsAsString","initialValue","parse","settings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","primary","main","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e147dcd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settings_container__cCrPE\",\"value\":\"settings_value__2alja\",\"maxInput\":\"settings_maxInput__ZV-dP\",\"minInput\":\"settings_minInput__2XAkr\",\"buttons\":\"settings_buttons__2Db0X\",\"errValue\":\"settings_errValue__34fXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"counter_container__YFK4P\",\"value\":\"counter_value__1mFaD\",\"buttons\":\"counter_buttons__1oyHJ\",\"errValue\":\"counter_errValue__192lF\"};","export type ActionsType = ReturnType<typeof changeCountAC> |\r\n                          ReturnType<typeof resetCountAC> |\r\n                          ReturnType<typeof changeMaxValueAC> |\r\n                          ReturnType<typeof changeStartValueAC> |\r\n                          ReturnType<typeof setValueAC> |\r\n                          ReturnType<typeof setErrorAC> |\r\n                          ReturnType<typeof setInitialValuesAC>\r\n\r\n\r\nexport const initialState = {\r\n    value: 0 as number | string,\r\n    startValue: 0,\r\n    maxValue: 3,\r\n    isDisabled: false,\r\n    disableBtn: true,\r\n    error: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_INITIAL_VALUES\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n\r\n        case 'CHANGE_COUNT':\r\n            return {...state, ...action.payload}\r\n        case 'RESET_COUNT':\r\n            return {...state, value: state.startValue}\r\n        case 'CHANGE_MAX_VALUE':\r\n            return {\r\n                ...state, ...action.payload,\r\n                value: 'enter values'\r\n                /*  maxValue: action.value,\r\n                  isDisabled: action.isDisabled,\r\n                  disableBtn: action.disableBtn,*/\r\n\r\n            }\r\n        case 'CHANGE_START_VALUE':\r\n            return {\r\n                ...state, ...action.payload,\r\n                value: 'enter values '\r\n                /*       startValue: action.value,\r\n                       isDisabled: action.isDisabled,\r\n                       disableBtn: action.disableBtn,*/\r\n            }\r\n        case 'SET_VALUE':\r\n            return {\r\n                ...state,\r\n                value: state.startValue, ...action.payload\r\n             /*   isDisabled: action.isDisabled,\r\n                disableBtn: action.disableBtn,\r\n                error: action.error*/\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const changeCountAC = (value: number, error: boolean) => ({\r\n    type: 'CHANGE_COUNT',\r\n    payload: {value, error}\r\n} as const)\r\nexport const resetCountAC = () => ({type: 'RESET_COUNT'} as const)\r\nexport const changeMaxValueAC = (maxValue: number, isDisabled: boolean, disableBtn: boolean) => ({\r\n    type: 'CHANGE_MAX_VALUE',\r\n    payload: {\r\n        maxValue,\r\n        isDisabled,\r\n        disableBtn\r\n    }\r\n} as const)\r\nexport const changeStartValueAC = (startValue: number, isDisabled: boolean, disableBtn: boolean) => (\r\n    {\r\n        type: 'CHANGE_START_VALUE',\r\n        payload: {\r\n            startValue,\r\n            isDisabled,\r\n            disableBtn\r\n        }\r\n\r\n    } as const)\r\nexport const setValueAC = (isDisabled: boolean, disableBtn: boolean, error: boolean) => ({\r\n    type: 'SET_VALUE', payload: {\r\n        isDisabled,\r\n        disableBtn,\r\n        error,\r\n    }\r\n} as const)\r\nexport const setErrorAC = (error: boolean) => ({type: 'SET_ERROR', payload: {error}} as const)\r\nexport const setInitialValuesAC = (startValue: number, maxValue: number, value: number) => ({\r\n    type: 'SET_INITIAL_VALUES',\r\n    payload: {\r\n        startValue,\r\n        maxValue,\r\n        value\r\n    }\r\n} as const)\r\n\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nlet store = createStore(rootReducer)\r\nexport type AppStoreType= typeof store\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootReducerType> = useSelector;\r\n\r\nexport default store","import React, {useEffect} from \"react\";\r\nimport s from \"./counter.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\n\r\nimport {Button} from \"@mui/material\";\r\nimport {changeCountAC, resetCountAC, setErrorAC} from \"../../Redux/counter-reducer\";\r\n\r\n\r\nexport const Counter = () => {\r\n\r\n    const value = useTypedSelector<number| string>(state => state.counter.value)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const error = useTypedSelector<boolean>(state => state.counter.error)\r\n    const isDisabled = useTypedSelector<boolean>(state => state.counter.isDisabled)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const incrementValue = () => {\r\n        if (value < maxValue) {\r\n            dispatch((changeCountAC(+value + 1, false)))\r\n            localStorage.setItem('counterValue', JSON.stringify(+value + 1))\r\n        }\r\n    }\r\n    const resetValue = () => {\r\n        dispatch((resetCountAC()))\r\n    }\r\n\r\n\r\n    const buttonStyle = {\r\n        backgroundColor: \"#07575B\", color: \"#66A5AD\", borderRadius: \"20px\",\r\n        boxShadow: \"0px 1px 5px 2px #07575B\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (value === maxValue) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n    }, [value])\r\n\r\n\r\n    const errorValues =  maxValue === startValue || startValue < 0 || startValue > maxValue\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={ error ? s.errValue :s.value}>\r\n                <h1 >\r\n                    {\r\n                        errorValues\r\n                            ? <span  style={{color: \"red\", fontSize: \"30px\", fontWeight:'lighter', }}>Incorrect value</span>\r\n                            :  value\r\n                    }\r\n                </h1>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    sx={buttonStyle}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    disabled={isDisabled ? isDisabled : value >= maxValue}\r\n                    onClick={incrementValue}>Inc</Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    sx={buttonStyle}\r\n                    disabled={isDisabled ? isDisabled : value === startValue}\r\n                    onClick={resetValue}>Reset</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './settings.module.css'\r\nimport {useTypedSelector} from \"../../Redux/redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, TextField} from \"@mui/material\";\r\nimport {changeMaxValueAC, changeStartValueAC, setErrorAC, setValueAC} from \"../../Redux/counter-reducer\";\r\n\r\n\r\nexport const Settings = () => {\r\n\r\n\r\n    const disableBtn = useTypedSelector<boolean>(state => state.counter.disableBtn)\r\n    const maxValue = useTypedSelector<number>(state => state.counter.maxValue)\r\n    const startValue = useTypedSelector<number>(state => state.counter.startValue)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const setSettingsHandler = () => {\r\n        dispatch(setValueAC(false, true, false))\r\n        localStorage.setItem('Settings', JSON.stringify({'startValue': startValue, 'maxValue': maxValue}))\r\n    }\r\n\r\n    const onChangeMaxNumberHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.valueAsNumber\r\n        dispatch(changeMaxValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n    const onChangeStartNumberHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.valueAsNumber\r\n        dispatch(changeStartValueAC(value, true, false))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n\r\n\r\n\r\n    const buttonStyle = {\r\n        backgroundColor: \"#07575B\", color: \"#66A5AD\", borderRadius: \"20px\",\r\n        boxShadow: \"0px 1px 5px 2px #07575B\"\r\n    }\r\n\r\n    const errValue = maxValue === startValue || startValue! > maxValue! || startValue! < 0\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={errValue? s.errValue: s.value}>\r\n                <div className={s.maxInput}>\r\n                <span>max value:\r\n                    <TextField variant={\"standard\"}\r\n                               color={ \"primary\"}\r\n                               value={maxValue}\r\n                               onChange={onChangeMaxNumberHandler}\r\n                               type={\"number\"}\r\n                               sx={{\r\n                                   input: {\r\n                                       width: \"60px\",\r\n                                       height: \"15px\",\r\n\r\n                                   }\r\n                               }}\r\n                    />\r\n\r\n                </span>\r\n\r\n                </div>\r\n                <div className={s.minInput}>\r\n                    <span>start value:\r\n                         <TextField variant={\"standard\"}\r\n                                    color={\"primary\"}\r\n                                    value={startValue}\r\n                                    onChange={onChangeStartNumberHandler}\r\n                                    type={\"number\"}\r\n                                    sx={{\r\n                                        input: {\r\n                                            width: \"60px\",\r\n                                            height: \"15px\"\r\n                                        }\r\n                                    }}\r\n                         />\r\n\r\n                </span>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <Button variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        className={s.btn} disabled={disableBtn}\r\n                        sx={buttonStyle}\r\n                        onClick={setSettingsHandler}>Set</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {useDispatch} from \"react-redux\";\nimport {setInitialValuesAC} from \"./Redux/counter-reducer\";\n\n\n\nconst App = () => {\n\n\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        let initialValueAsString = localStorage.getItem('counterValue')\n        let settingsAsString = localStorage.getItem('Settings')\n        if (settingsAsString !== null && initialValueAsString !== null) {\n            const initialValue = JSON.parse(initialValueAsString)\n            const settings = JSON.parse(settingsAsString)\n            dispatch(setInitialValuesAC(settings.startValue, settings.maxValue, initialValue))\n        }\n\n    }, [])\n\n    return (\n        <div className=\"Wrapper\" >\n            <div className=\"table\">\n                <Counter/>\n            </div>\n            <div>\n                <Settings/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from '../src/Redux/redux-store'\nimport {ThemeProvider, createTheme} from '@mui/material'\n\n\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#07575B',\n        }\n    },\n})\n\n\nReactDOM.render(\n  <Provider store={store}>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}